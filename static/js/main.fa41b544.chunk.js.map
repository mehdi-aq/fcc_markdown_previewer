{"version":3,"sources":["redux.js","Components/TextArea.js","defaultInput.js","Components/Previewer.js","Components/App.js","index.js"],"names":["store","createStore","state","action","type","newState","Object","assign","lines","text","split","html","marked","i","length","linesNumber","toString","mapStateToProps","mapDispatchToProps","dispatch","dispatchParse","parse","TextArea","props","input","event","this","setState","target","value","id","className","spellCheck","onChange","handleChange","bind","React","Component","connect","Previewer","ref","createRef","innerRef","disabled","App","setOptions","breaks","ReactDOM","render","document","getElementById"],"mappings":"iQAyBMA,EAAQC,aAdE,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACpC,OAAQA,EAAOC,MACX,IAVM,QAWF,IAAIC,EAAWC,OAAOC,OAAO,GAAIJ,GAC7BK,EAAQL,EAAOM,KAAKC,MAAM,MAC9BL,EAASM,KAAOC,IAAOT,EAAOM,MAC9B,IAAK,IAAII,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAC9BR,EAASU,aAAeF,EAAEG,WAAa,KAE3C,OAAOX,EACX,QACI,OAAOH,MAIbe,EAAkB,SAACf,GAAD,MAAY,CAChCS,KAAMT,EAAMS,KACZF,KAAMP,EAAMO,KACZM,YAAab,EAAMa,cAEjBG,EAAqB,SAACC,GACxB,MAAQ,CACJC,cAAe,SAACX,GACZU,EA9BE,SAACV,GACX,MAAO,CACHL,KAHM,QAINK,KAAMA,EACNM,YAAa,IA0BAM,CAAMZ,O,4BC7BrBa,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDrB,MAAQ,CACTsB,MCTO,uaDMI,E,yDAMNC,GAAQ,IAAD,OAChBC,KAAKC,SAAS,CAAEH,MAAOC,EAAMG,OAAOC,QAAQ,WACxC,EAAKN,MAAMH,cAAc,EAAKlB,MAAMsB,Y,0CAIxCE,KAAKH,MAAMH,cAAcM,KAAKxB,MAAMsB,MAAO,K,+BAG3C,OACI,kBAAC,WAAD,KACA,yBAAKM,GAAG,YACJ,8BACID,MAAOH,KAAKH,MAAMR,YAClBgB,UAAU,iBACd,8BACID,GAAG,mBACHE,YAAY,EACZH,MAAOH,KAAKxB,MAAMsB,MAClBS,SAAUP,KAAKQ,aAAaC,KAAKT,c,GA1B9BU,IAAMC,WAkCdf,EADfA,EAAWgB,YAAQrB,EAAiBC,EAAzBoB,CAA6ChB,G,iBEjClDiB,E,kDACF,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IACDiB,IAAMJ,IAAMK,YAFF,E,qDAKf,OACI,kBAAC,IAAD,CACIX,GAAG,YACHY,SAAUhB,KAAKc,IACfG,UAAU,EACVhC,KAAMe,KAAKH,MAAMZ,W,GAXTyB,IAAMC,WAiBfE,EADfA,EAAYD,YAAQrB,EAAiBC,EAAzBoB,CAA6CC,GCH1CK,E,uKAZP,OACI,kBAAC,WAAD,KACA,wBAAId,GAAG,aAAP,yBACA,yBAAKA,GAAG,OACJ,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWA,GAAG,oB,GAPZM,IAAMC,W,MCIxBzB,IAAOiC,WAAW,CACdC,QAAQ,IAGZC,IAASC,OACL,kBAAC,IAAD,CAAUhD,MAAOA,GACb,kBAAC,EAAD,OAEJiD,SAASC,eAAe,W","file":"static/js/main.fa41b544.chunk.js","sourcesContent":["import { createStore } from 'redux'\nimport marked from 'marked'\n\nconst PARSE = 'PARSE'\nconst parse = (text) => {\n    return {\n        type: PARSE,\n        text: text,\n        linesNumber: ''\n    }\n}\nconst reducer = (state = '', action) => {\n    switch (action.type) {\n        case PARSE:\n            let newState = Object.assign({}, action)\n            let lines = action.text.split(/\\n/)\n            newState.html = marked(action.text)\n            for (let i = 0; i < lines.length; i ++) {\n                newState.linesNumber += i.toString() + '\\n'\n            }\n            return newState\n        default:\n            return state\n    }\n}\nconst store = createStore(reducer)\nconst mapStateToProps = (state) => ({\n    html: state.html,\n    text: state.text,\n    linesNumber: state.linesNumber\n})\nconst mapDispatchToProps = (dispatch) => {\n    return ({\n        dispatchParse: (text) => {\n            dispatch(parse(text))\n        }\n    })\n}\nexport {\n    store,\n    mapStateToProps,\n    mapDispatchToProps\n}","import React, { Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport { mapStateToProps, mapDispatchToProps } from '../redux.js'\nimport defaultInput from '../defaultInput.js'\n\nclass TextArea extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            input: defaultInput\n        }\n    }\n    handleChange(event) {\n        this.setState({ input: event.target.value },() => {\n            this.props.dispatchParse(this.state.input)\n        })\n    }\n    componentDidMount() {\n        this.props.dispatchParse(this.state.input, 1)\n    }\n    render() {\n        return (\n            <Fragment>\n            <div id='TextArea'>\n                <textarea\n                    value={this.props.linesNumber}\n                    className='lines-number'/>\n                <textarea\n                    id='TextArea-writter'\n                    spellCheck={false}\n                    value={this.state.input}\n                    onChange={this.handleChange.bind(this)} />\n            </div>\n            </Fragment>\n        )\n    }\n}\n\nTextArea = connect(mapStateToProps, mapDispatchToProps)(TextArea)\nexport default TextArea","let defaultInput = '# Markdown Previewer\\n' +\n'## markdown exmaple\\n' +\n'[My FreeCodeCamp Portfolio](https://www.freecodecamp.org/douah_mehdi)\\n\\n' +\n'inline code example: `printf(\"Hello world !\\\\n\");`\\n\\n' +\n'```\\n' + \n'#include stdio.h\\n' +\n'#include stdlib.h\\n' +\n'\\n' +\n'int main(int argc, char *argv[]) {\\n' +\n'   printf(\"Hello world !\\\\n);\\n' +\n'   return EXIT_SUCCESS;\\n' +\n'}\\n' +\n'```\\n\\n' +\n'- Simple\\n' +\n'- List\\n' +\n'- Example\\n' +\n'> Block quotes\\n\\n' + \n'![React Logo w/ Text](https://goo.gl/Umyytc)\\n\\n' +\n'**bold**'\nexport default defaultInput","import React from 'react'\nimport ContentEditable from 'react-contenteditable'\nimport { connect } from 'react-redux'\nimport { mapStateToProps, mapDispatchToProps } from '../redux.js'\n\nclass Previewer extends React.Component {\n    constructor(props) {\n        super(props)\n        this.ref = React.createRef()\n    }\n    render() {\n        return (\n            <ContentEditable\n                id='previewer'\n                innerRef={this.ref}\n                disabled={true}\n                html={this.props.html} />\n        )\n    }\n}\n\nPreviewer = connect(mapStateToProps, mapDispatchToProps)(Previewer)\nexport default Previewer","import React, { Fragment } from 'react'\nimport TextArea from './TextArea.js'\nimport Previewer from './Previewer.js'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Fragment>\n            <h1 id='title-bar'>FCC Markdow Previewer</h1>\n            <div id='App'>\n                <TextArea />\n                <Previewer id='previewer' />\n            </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport marked from 'marked'\nimport { store } from './redux.js'\nimport App from './Components/App.js'\nimport style from './style.css'\n\nmarked.setOptions({\n    breaks: true\n})\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}